struct __scrypt_ts_Change {  int amount;  Ripemd160 address;}

contract Loyalty {
  @state int loyalPoints;
  Sha256 ownerPubKey;
  bytes __scrypt_ts_ctx_hashoutputs;
  int __scrypt_ts_ctx_value;
  __scrypt_ts_Change __scrypt_ts_change;
  constructor(Sha256 ownerPubKey) {
    this.loyalPoints = (0);
    this.ownerPubKey = ownerPubKey;
  }
  public function increaseLoyalPoints(int points, SigHashPreimage __scrypt_ts_txPreimage, int __scrypt_ts_changeAmount, Ripemd160 __scrypt_ts_changeAddress) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    this.__scrypt_ts_change = {__scrypt_ts_changeAmount, __scrypt_ts_changeAddress};
    this.loyalPoints = points;
    int amount = this.__scrypt_ts_ctx_value;
    bytes outputs = this.buildStateOutput(amount) + this.buildChangeOutput();
    require(this.__scrypt_ts_ctx_hashoutputs == hash256(outputs));
  }
  public function redeemPoints(SigHashPreimage __scrypt_ts_txPreimage) {
    require(Tx.checkPreimageSigHashType(__scrypt_ts_txPreimage, SigHashType(b'41')));
    this.__scrypt_ts_ctx_hashoutputs = SigHash.hashOutputs(__scrypt_ts_txPreimage);
    this.__scrypt_ts_ctx_value = SigHash.value(__scrypt_ts_txPreimage);
    require(this.__scrypt_ts_ctx_hashoutputs == this.ownerPubKey);
  }
  function buildStateOutput(int amount) : bytes {  return Utils.buildOutput(this.getStateScript(), amount);}
  function buildChangeOutput() : bytes {  return this.__scrypt_ts_change.amount > 0 ? Utils.buildOutput(Utils.buildPublicKeyHashScript(this.__scrypt_ts_change.address), this.__scrypt_ts_change.amount) : b'';}
}